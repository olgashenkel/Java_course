import java.util.Scanner;

public class Main_15 {
    public static void main(String[] args) {


// *********************************
// Java: Инкремент и декремент
// *********************************

//Из языка Си в Java перекочевали две операции: инкремент ++ и декремент --,
// которые очень часто встречаются вместе с циклами.
//
//Эти унарные операции увеличивают и уменьшают на единицу число, записанное в переменную:
//
//var i = 0;
//i++; // 0
//i++; // 1
//
//i--; // 2
//i--; // 1
//Кроме постфиксной формы, у них есть и префиксная:
//
//var i = 0;
//++i; // 1
//++i; // 2
//
//--i; // 1
//--i; // 0
//Кажется, что нет никакой разницы между постфиксной и префиксной формами, но тут начинаются сложности.
// В отличие от всех остальных операций, инкремент и декремент не только возвращают значение,
// но и изменяют значение переменной.
//
//При использовании префиксной нотации сначала происходит изменение переменной, а потом возврат.
// При использовании постфиксной нотации — наоборот: можно считать, что сначала происходит возврат,
// а потом изменение переменной.
//
//Правило работает одинаково для инкремента и декремента. Для простоты рассмотрим только инкремент:
//
//var x = 5;
//
//System.out.println(++x); // => 6
//System.out.println(x);   // => 6
//
//System.out.println(x++); // => 6
//System.out.println(x);   // => 7
//Что происходит в коде выше:
//
//Выводим на экран ++x — префиксный инкремент. Поэтому сначала значение переменной увеличилось на 1,
// потом результат вернулся и вывелся на экран
//Так как значение изменилось, System.out.println(x) вывел 6
//Теперь выводим на экран x++ — постфиксный инкремент. Поэтому мы получили значение,
// содержавшееся в переменной до ее увеличения на 1
//Так как значение изменилось, System.out.println(x) вывел 7
//Особенно сложно становится, когда инкремент вставляют внутрь других операций: x = i++ - 7 + --h.
// Понять такой код почти невозможно.
//
//Рекомендации по использованию:
//
//Никогда не смешайте операции без побочных эффектов и операциями с побочными эффектами. То же самое касается и методов
//Используйте инкремент и декремент только там, где нет разницы между префиксным и постфиксным вариантом —
// отдельно от всего, на отдельной строчке кода

        Scanner in = new Scanner(System.in);
        System.out.print("Введите любую строку: ");
        String str = in.nextLine();
        System.out.print("Введите номер интервала, через который \nкаждый символ будет переведен в верхний регистр: ");
        int n = in.nextInt();
        System.out.println(makeItFunny(str, n));

        in.close();
    }


// Задание 1.
//Реализуйте статический метод App.makeItFunny(), который принимает на вход строку и возвращает её копию,
// у которой каждый n-ный элемент переведен в верхний регистр. n – задается на входе в функцию.
// Для определения каждого n-ного элемента понадобится остаток от деления %. Подумайте, как его можно использовать.
//
//var text = "I never look back";
//// Каждый третий элемент
//App.makeItFunny(text, 3); // "I NevEr LooK bAck"

    public static String makeItFunny(String str, int n) {
        int i = 0;
        String result = "";

        while (i < str.length()) {
            if ((i + 1) % n == 0) {
                result += str.toUpperCase().charAt(i);
            } else {
                result += str.charAt(i);
            }
            i++;
        }
        return result;
    }

}
