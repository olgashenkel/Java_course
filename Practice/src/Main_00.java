import java.time.LocalDate;
import java.time.Month;
import java.time.temporal.ChronoUnit;

public class Main_00 {
    public static void main(String[] args) {

//        var greeting = "Father!";
//        System.out.println(greeting);
//////////////////////////////////////////////////////////////////////////
/*
      Любой ссылочный тип данных может принимать значение null.
      То есть, null является значением любого ссылочного типа.
      А вот примитивные типы и null не совместимы.
 */
//        String user = null;   // присвоить значение null
//        System.out.println(user);
//////////////////////////////////////////////////////////////////////////
/*
ВЫВОД НА КОНСОЛЬ

Для создания потока вывода в класс System определен объект out.
В этом объекте определен метод println, который позволяет вывести
на консоль некоторое значение с последующим переводом курсора консоли на следующую строку

int x=5;
int y=6;
функция для форматированного вывода System.out.printf():
System.out.printf("x=%d; y=%d \n", x, y);

•	%d: для вывода целочисленных значений
•	%x: для вывода шестнадцатеричных чисел
•	%f: для вывода чисел с плавающей точкой.
        При выводе чисел с плавающей точкой мы можем указать количество знаков после запятой,
        для этого используем спецификатор на %.2f, где .2 указывает,
        что после запятой будет два знака.
•	%e: для вывода чисел в экспоненциальной форме, например, 1.3e+01
•	%c: для вывода одиночного символа
•	%s: для вывода строковых значений
*/

//        метод System.out.print(), который аналогичен println за тем исключением,
//        что не осуществляет перевода на следующую строку
//        System.out.print("Hello, world!");
//        System.out.print("Hello, world!");

//////////////////////////////////////////////////////////////////////////
/*
ВВОД С КОНСОЛИ

Для получения ввода с консоли в классе System определен объект in.
Однако непосредственно через объект System.in не очень удобно работать,
поэтому, как правило, используют класс Scanner, который, в свою очередь использует System.in

Так как класс Scanner находится в пакете java.util,
то мы вначале его импортируем с помощью инструкции import java.util.Scanner
*/

//        Scanner in = new Scanner(System.in);
//        System.out.print("Input a number: ");
//        int num = in.nextInt();
//
//        System.out.printf("Your number: %d \n", num);
//        in.close();

/*
Класс Scanner имеет еще ряд методов, которые позволяют получить введенные пользователем значения:
•	next(): считывает введенную строку до первого пробела
•	nextLine(): считывает всю введенную строку
•	nextInt(): считывает введенное число int
•	nextDouble(): считывает введенное число double
•	nextBoolean(): считывает значение boolean
•	nextByte(): считывает введенное число byte
•	nextFloat(): считывает введенное число float
•	nextShort(): считывает введенное число short
 */

//        Например, создадим программу для ввода информации о человеке:
//        Scanner in = new Scanner(System.in);
//        System.out.print("Input name: ");
//        String name = in.nextLine();
//        System.out.print("Input age: ");
//        int age = in.nextInt();
//        System.out.print("Input height: ");
//        float height = in.nextFloat();
//        System.out.printf("Name: %s Age: %d Height: %.2f \n", name, age, height);
//        in.close();

////////////////////////

////        Рассмотрим еще несколько примеров с добавлением переменных:
//
//        var company = "Hexlet";
//
//        var companyLength = company.length();
//        System.out.println(companyLength); // => 6
//// Приводим к верхнему регистру
//        System.out.println(company.toUpperCase()); // "HEXLET"
//
//// В примерах выше результат вызова каждого метода записывается в переменные.
//// Но это не обязательно, мы можем использовать методы напрямую:
//
//        System.out.println(company.length()); // => 6
//////////////////////////

//        метод, извлекающий из строки подстроку, то есть часть строки.
//                Этот метод принимает на вход://
//        Первым параметром индекс, с которого надо начать извлекать подстроку
//        Вторым параметром — индекс, до которого нужно извлекать символы
//        По умолчанию берется строка до конца:

//        System.out.println("hexlet".substring(1));    // "exlet"
//        System.out.println("hexlet".substring(1, 2)); // "e"
//        System.out.println("hexlet".substring(1, 3)); // "ex"
//        System.out.println("hexlet".substring(3, 6)); // "let"

/*
        Задание
        Вам даны три переменные с фамилиями разных людей. Составьте и выведите на экран слово из символов в таком порядке:
1) третий символ из первой строки;
2) второй символ из второй строки;
3) четвертый символ из третьей строки;
4) пятый символ из второй строки;
5) третий символ из второй строки.

  Вывод результата должен быть примерно в таком виде:   a b c d e
 */
//        var one = "Naharis";
//        var two = "Mormont";
//        var three = "Sand";
//        System.out.print(one.charAt(2) + " ");
//        System.out.print(two.charAt(1) + " ");
//        System.out.print(three.charAt(3) + " ");
//        System.out.print(two.charAt(4) + " ");
//        System.out.print(two.charAt(2));


//        var text = "Never forget what you are, for surely the world will not";
//
//        // BEGIN (write your solution here)
//        System.out.println("First: " + text.charAt(0) + "\nLast: " + text.charAt(text.length()-1));
//        // END

//////////////////////////////////////////////////////////////////////////

/*
Задание
Данные, вводимые пользователями в формах, часто содержат лишние пробельные символы в конце или начале строки.
Кроме того, пользователи могут вводить одно и то же в разном регистре, что потом мешает работе с данными.
Поэтому перед тем как добавлять их, данные обрабатывают (говорят нормализуют). В базовую обработку входят два действия:

Удаление концевых пробельных символов с помощью метода .trim(), например, было: " hexlet\n ", стало: "hexlet"
Приведение к нижнему регистру с помощью метода toLowerCase(). Было: "SUPPORT@hexlet.io", стало: "support@hexlet.io".
Обновите переменную email записав в неё то же самое значение, но обработанное по схеме указанной выше. Распечатайте то, что получилось, на экран.
 */

//        var email = " SupporT@hexlet.io   \n";
//        System.out.println(email.trim().toLowerCase());
//////////////////////////////////////////////////////////////////////////

/*
Задание
Напишите код, который берет данные из переменной name и выполняет капитализацию.
В программировании так называют операцию, которая делает заглавной первую букву в слове,
а все остальные переводит в нижний регистр. Например: heXlet => Hexlet. Программа должна выводить результат на экран.

Для извлечения частей слова, воспользуйтесь методом substring():

// 1 параметр – начальный индекс, 2 – конечный индекс (не включая)
"hexlet".substring(0, 1); // "h"
// По умолчанию до конца строки
"hexlet".substring(1); // "exlet"
 */
//        1-ый способ:
        var name = "hexlet";
        var name1 = name.substring(0, 1).toUpperCase();
        var name2 = name.substring(1).toLowerCase();
        System.out.println(name1 + name2);

//        2-ой способ:
        var capitalized = name.substring(0, 1).toUpperCase()
                + name.substring(1).toLowerCase();
        System.out.println(capitalized);
//////////////////////////////////////////////////////////////////////////

        /*
        Задание
Метод Math.random() возвращает случайное число от 0 до 1 с большим количеством знаков после запятой.
Но в реальных задачах бывает нужно получать случайные целые числа.
Реализуйте код, который печатает на экран случайное целое число от 0 до 10.
Чтобы получить такое число, нужно умножить результат вызова Math.random() на 10
и преобразовать тип полученного числа из double в int.

// Преобразование в int
(int) 0.932342; // 0
(int) 8.123412; // 8
Попробуйте решить это задание в одну строчку
         */
        System.out.println((int) (Math.random() * 10));

//////////////////////////////////////////////////////////////////////////

        /*
Java, как и любой другой язык, поставляется с набором полезных методов.
Все вместе они составляют так называемую стандартную библиотеку.

        Задание
Напишем код в стиле "повтори за учителем".
Рассчитаем количество дней между двумя датами используя встроенные возможности Java.
Попробуйте "поиграть" с датами.
         */

// С даты
        LocalDate dateFrom = LocalDate.of(2017, Month.MAY, 24);
// По дату
        LocalDate dateTo = LocalDate.of(2024, Month.JUNE, 17);
// Количество дней между этими датами
        long noOfDaysBetween = ChronoUnit.DAYS.between(dateFrom, dateTo);
        System.out.println(noOfDaysBetween);


//////////////////////////////////////////////////////////////////////////
/*
Java: Какие бывают методы
////////
Выводы
///////
1) Статические методы не связаны с конкретными объектами и вызываются из класса напрямую
2) Нестатические методы строят свою логику относительно данных самого объекта и вызываются у конкретных объектов
Все это плавно подводит нас к возможности самостоятельно создавать классы,
объекты и методы, без чего невозможно себе представить ни одну программу, даже небольшую.
 */

/*
Задание
В переменной emoji находится текстовый грустный смайлик -(.
Ваша задача — сделать этот смайлик веселым с помощью двух преобразований:

Добавить слева глаза :
Заменить ( на ) (с помощью метода строки replace())
Должно получиться: :-). Выведите его на экран.
 */
        var emoji = "-(";
        // BEGIN (write your solution here)
        System.out.println(":" + emoji.replace("(", ")"));
        // END

//////////////////////////////////////////////////////////////////////////

    }
}
