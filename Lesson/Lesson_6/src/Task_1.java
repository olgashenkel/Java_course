// Интерфейс Set и класс HashSet
// *******************************

//Интерфейс Set расширяет интерфейс Collection и представляет набор уникальных элементов.
// Set не добавляет новых методов, только вносит изменения в унаследованные.
// В частности, метод add() добавляет элемент в коллекцию и возвращает true, если в коллекции еще нет
// такого элемента.

//Обобщенный класс HashSet представляет хеш-таблицу. Он наследует свой функционал от класса AbstractSet,
// а также реализует интерфейс Set.
//Хеш-таблица представляет такую структуру данных, в которой все объекты имеют уникальный ключ или хеш-код.
// Данный ключ позволяет уникально идентифицировать объект в таблице.

//Для создания объекта HashSet можно воспользоваться одним из следующих конструкторов:
//•	HashSet(): создает пустой список
//•	HashSet(Collection<? extends E> col): создает хеш-таблицу, в которую добавляет все элементы коллекции col
//•	HashSet(int capacity): параметр capacity указывает начальную емкость таблицы, которая по умолчанию равна 16
//•	HashSet(int capacity, float koef): параметр koef или коэффициент заполнения,
//  значение которого должно быть в пределах от 0.0 до 1.0, указывает,
//  насколько должна быть заполнена емкость объектами прежде чем произойдет ее расширение.
//  Например, коэффициент 0.75 указывает, что при заполнении емкости на 3/4 произойдет ее расширение.

//Класс HashSet не добавляет новых методов, реализуя лишь те, что объявлены в родительских классах
// и применяемых интерфейсах

// HashSet
// isEmpty() – проверка на пустоту.
//add(V) – добавление элемента в коллекцию.
//remove(V) – удаление элемента из коллекцию.
//contains(V) – проверка на включение элемента в коллекции.
//clear() – удаление всех элементов коллекции.
//size() – возвращает количество элементов коллекции.


// HashSet как синоним множества
// addAll(Coll) – объединение множеств.
//retainAll(Coll) – пересечение множеств.
//removeAll(Coll) – разность множеств.


import java.util.HashSet;
import java.util.Set;

public class Task_1 {
    public static void main(String[] args) {
        Set<Integer> set = new HashSet<>();
        set.add(1); set.add(12); set.add(123);
        set.add(1234); set.add(1234);
        System.out.println(set.contains(12)); // true
        set.add(null);
        System.out.println(set.size()); // 5
        System.out.println(set); // [null, 1, 1234, 123, 12]
        set.remove(12); // remove(V) – удаление элемента из коллекции.
        for (var item : set) System.out.println(item); // перебор элементов --> null 1 1234 123
        set.clear();    // clear() – удаление всех элементов коллекции.
        System.out.println(set); // []



//        var a = new HashSet<>(Arrays.asList(1,2,3,4,5,6,7));
//        System.out.println(a); // [1, 2, 3, 4, 5, 6, 7]
//        var b = new HashSet<>(Arrays.asList(2,3,5,7,11,13,17));
//        System.out.println(b); // [17, 2, 3, 5, 7, 11, 13]
//        var u = new HashSet<Integer>(a); u.addAll(b);
//        var r = new HashSet<Integer>(a); r.retainAll(b);
//        var s = new HashSet<Integer>(a); s.removeAll(b);
//        System.out.println(a); // [1, 2, 3, 4, 5, 6]
//        System.out.println(b); // [17, 2, 3, 5, 7, 11, 13]
//        System.out.println(u); // [1, 17, 2, 3, 4, 5, 6, 7, 11, 13]
//        System.out.println(r); // [2, 3, 5, 7]
//        System.out.println(s); // [1, 4, 6]





    }
}