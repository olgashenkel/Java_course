public class Worker {
    public static void main(String[] args) {


    }

    int id;
    int salary;
    String firstName;
    String lastName;

    @Override
    // переопределение базового метода toString для вывода на консоль (прописываем поведение при вызове значений Worker)
    public String toString() {
        return String.format("Cведения о работнике id_%d\nfirstName: %s \nlastName: %S \nsalary: %d" +
                        "\n*******************************",
                id, firstName, lastName, salary);
    }

//***********************************************************************************
// Метод toString служит для получения представления данного объекта в виде строки.
// При попытке вывести строковое представления какого-нибудь объекта, как правило,
// будет выводиться полное имя класса.
// System.out.println(tom.toString()); // Будет выводить что-то наподобие Person@7960847b
// Поэтому метод toString() нередко переопределяют
//***********************************************************************************


    @Override
    // данный метод очень важен и к написанию его поведения надо подходить более точно!!!
    // в текущем примере поведение hashCode написано кратко, только для примера записи
    public int hashCode() {
        return id;
    }

    @Override
    // переопределение базового метода equals для вывода на консоль (прописываем поведение при вызове значений Worker)
    // данный метод equals очень важен и к написанию его поведения надо подходить более точно!!!
    // в текущем примере поведение equals написано кратко, только для примера записи
    public boolean equals(Object obj) {
        Worker t = (Worker) obj;
        return id == t.id && firstName == t.firstName;
    }
}
//***********************************************************************************
//Метод equals сравнивает два объекта на равенство
// Пример:
//
//    @Override
//    public boolean equals(Object obj){
//
//        if (!(obj instanceof Person)) return false;
//
//        Person p = (Person)obj;
//        return this.name.equals(p.name);
//    }
//Метод equals принимает в качестве параметра объект любого типа, который мы затем приводим к текущему,
// если они являются объектами одного класса.

//Оператор instanceof позволяет выяснить, является ли переданный в качестве параметра объект
// объектом определенного класса, в данном случае класса Person.

// Если объекты принадлежат к разным классам, то их сравнение не имеет смысла, и возвращается значение false.
//Затем сравниваем по именам. Если они совпадают, возвращаем true, что будет говорить, что объекты равны
//***********************************************************************************