// Queue
// **************************

// Очереди представляют структуру данных, работающую по принципу FIFO (first in - first out).
// То есть чем раньше был добавлен элемент в коллекцию, тем раньше он из нее удаляется.
// Это стандартная модель однонаправленной очереди. Однако бывают и двунаправленные - то есть такие,
// в которых мы можем добавить элемент не только в начала, но и в конец.
// И соответственно удалить элемент не только из конца, но и из начала.

// ****************************************************
// Queue<Integer> queue = new LinkedList<Integer>();
//queue.add(3);     // добавление элементов, причем элементы могут быть разбросаны в ячейках свободной памяти, а не располагаться друг за другом

// Queue<Integer> queue = new LinkedList<Integer>();
//int item = queue.remove(); // удаляется тот элемент, который был !!!в первую!!! очередь добавлен
// !!! Если попытаться исключить/извлечь элемент из очереди (при условии, что там элементов нет), в таком случае сработает исключение
// ****************************************************

// Интерфейс Queue
// **************************
//Обобщенный интерфейс Queue<E> расширяет базовый интерфейс Collection и определяет поведение класса
// в качестве однонаправленной очереди.
//
// Свою функциональность он раскрывает через следующие методы:
//•	E element(): возвращает, но не удаляет, элемент из начала очереди.
//                  Если очередь пуста, генерирует исключение NoSuchElementException
//•	boolean offer(E obj): добавляет элемент obj в конец очереди.
//                  Если элемент удачно добавлен, возвращает true, иначе - false
//•	E peek(): возвращает без удаления элемент из начала очереди. Если очередь пуста, возвращает значение null
//•	E poll(): возвращает с удалением элемент из начала очереди. Если очередь пуста, возвращает значение null
//•	E remove(): возвращает с удалением элемент из начала очереди.
//                     Если очередь пуста, генерирует исключение NoSuchElementException
//Таким образом, у всех классов, которые реализуют данный интерфейс, будет метод offer для добавления в очередь,
// метод poll для извлечения элемента из головы очереди, и методы peek и element,
// позволяющие просто получить элемент из головы очереди.




import java.util.*;

public class Task_2 {
    public static void main(String[] args) {

//        Queue<Integer> queue = new LinkedList<Integer>();
//        queue.add(1); // добавление элементов
//        queue.add(2); // добавление элементов
//        queue.add(3); // добавление элементов
//        queue.add(4); // добавление элементов
//        System.out.println(queue); // Вывод добавленных элементов
//        int item = queue.remove(); // удаляется тот элемент, который был !!!в первую!!! очередь добавлен
//        System.out.println(queue); // [2, 3, 4]
//        queue.offer(2809); // добавление элемента
//        item = queue.remove();
//        System.out.println(queue); // [3, 4, 2809] - удаление элемента
//        item = queue.remove();
//        System.out.println(queue); // [4, 2809] - удаляется тот элемент, который был !!!в первую!!! очередь добавлен
//        item = queue.poll();
//        System.out.println(queue); // [2809] - удаляется тот элемент, который был !!!в первую!!! очередь добавлен

//        Queue<Integer> queue = new LinkedList<Integer>();
//        queue.add(1);
//        System.out.println(queue);
//        int item = queue.remove();
//        System.out.println(item);
////        queue.remove(); // Исключение - Exception in thread "main" java.util.NoSuchElementException - так как нет элементов (очередь пуста)
//        queue.offer(2809);
//        System.out.println(queue);
//        item = queue.poll();
//        System.out.println(item);
//        System.out.println(queue);


//        Queue<Integer> queue = new LinkedList<Integer>();
//        queue.add(1);
//        queue.add(2);
//        System.out.println(queue);
//
//        int item = queue.remove();
//        System.out.println(item);
//
//        queue.offer(2809); //  добавляет элемент в конец очереди.
//        System.out.println(queue);
//
//        item = queue.poll(); //  возвращает с удалением элемент из начала очереди. Если очередь пуста, возвращает значение null
//        System.out.println(queue);
//
//        queue.element();    //  возвращает, но не удаляет, элемент из начала очереди.
//                 // !!!Если очередь пуста, генерирует исключение NoSuchElementException!!!
//        System.out.println(queue);
//
//        queue.remove();
//        queue.peek(); //  возвращает без удаления элемента из начала очереди.
//                    // !!!Если очередь пуста, возвращает значение null!!!
//        System.out.println(queue);



// ***********************
// PriorityQueue: очередь приоритетов
// ***********************
//

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        pq.add(123);
        pq.add(3);
        pq.add(13);
        pq.add(1);
        System.out.println(pq);
        System.out.println(pq.poll()); //  возвращает с удалением элемент из начала очереди. Если очередь пуста, возвращает значение null
        System.out.println(pq.poll()); //  возвращает с удалением элемент из начала очереди. Если очередь пуста, возвращает значение null
        System.out.println(pq.poll()); //  возвращает с удалением элемент из начала очереди. Если очередь пуста, возвращает значение null
        System.out.println(pq.poll()); //  возвращает с удалением элемент из начала очереди. Если очередь пуста, возвращает значение null
        System.out.println(pq.poll()); //  возвращает с удалением элемент из начала очереди. Если очередь пуста, возвращает значение null


    }
}
