// Deque – double ended queue
// ********************************

// Линейная коллекция, которая поддерживает вставку и удаление элементов на обоих концах.

// Интерфейс Deque
//Интерфейс Deque расширяет вышеописанный интерфейс Queue и определяет поведение двунаправленной очереди,
// которая работает как обычная однонаправленная очередь, либо как стек,
// действующий по принципу LIFO (последний вошел - первый вышел).

//Интерфейс Deque определяет следующие методы:
//•	void addFirst(E obj): добавляет элемент в начало очереди
//•	void addLast(E obj): добавляет элемент obj в конец очереди
//•	E getFirst(): возвращает без удаления элемент из головы очереди. Если очередь пуста, генерирует исключение NoSuchElementException
//•	E getLast(): возвращает без удаления последний элемент очереди. Если очередь пуста, генерирует исключение NoSuchElementException
//•	boolean offerFirst(E obj): добавляет элемент obj в самое начало очереди. Если элемент удачно добавлен, возвращает true, иначе - false
//•	boolean offerLast(E obj): добавляет элемент obj в конец очереди. Если элемент удачно добавлен, возвращает true, иначе - false
//•	E peekFirst(): возвращает без удаления элемент из начала очереди. Если очередь пуста, возвращает значение null
//•	E peekLast(): возвращает без удаления последний элемент очереди. Если очередь пуста, возвращает значение null
//•	E pollFirst(): возвращает с удалением элемент из начала очереди. Если очередь пуста, возвращает значение null
//•	E pollLast(): возвращает с удалением последний элемент очереди. Если очередь пуста, возвращает значение null
//•	E pop(): возвращает с удалением элемент из начала очереди. Если очередь пуста, генерирует исключение NoSuchElementException
//•	void push(E element): добавляет элемент в самое начало очереди
//•	E removeFirst(): возвращает с удалением элемент из начала очереди. Если очередь пуста, генерирует исключение NoSuchElementException
//•	E removeLast(): возвращает с удалением элемент из конца очереди. Если очередь пуста, генерирует исключение NoSuchElementException
//•	boolean removeFirstOccurrence(Object obj): удаляет первый встреченный элемент obj из очереди. Если удаление произшло, то возвращает true, иначе возвращает false.
//•	boolean removeLastOccurrence(Object obj): удаляет последний встреченный элемент obj из очереди. Если удаление произшло, то возвращает true, иначе возвращает false.
//Таким образом, наличие методов pop и push позволяет классам, реализующим этот элемент, действовать в качестве стека. В тоже время имеющийся функционал также позволяет создавать двунаправленные очереди, что делает классы, применяющие данный интерфейс, довольно гибкими.


import java.util.ArrayDeque;
import java.util.Deque;

public class Task_3 {
    public static void main(String[] args) {

        Deque<Integer> deque = new ArrayDeque<>();
        deque.addFirst(1); deque.add(2); deque.addLast(3);
        //addFirst(): добавляет элемент в начало очереди
        //addLast(): добавляет элемент в конец очереди
        System.out.println("Добавление элементов в очередь ->   " + deque);
        System.out.println();

        deque.removeFirst();
        //removeFirst(): возвращает с удалением элемента из начала очереди.
        // Если очередь пуста, генерирует исключение NoSuchElementException
        System.out.println("Удаление элемента из начала очереди ->   " + deque);

        deque.removeLast();
        //removeLast(): возвращает с удалением элемента из конца очереди.
        // Если очередь пуста, генерирует исключение NoSuchElementException
        System.out.println("Удаление элемента из конца очереди ->   " + deque);
        System.out.println();

        deque.offerFirst(1);
        //offerFirst(): добавляет элемент в самое начало очереди.
        System.out.println("Добавление элемента в  самое начало очереди ->   " + deque);
        deque.offer(7);
        deque.offer(8);
        deque.offer(15);
        System.out.println("Добавление элемента в очередь??? ->   " + deque);
        deque.offerLast(3);
        //offerLast(): добавляет элемент в конец очереди.
        System.out.println("Добавление элемента в конец очереди ->   " + deque);
        System.out.println();

        deque.pollFirst();
        //pollFirst(): возвращает с удалением элемент из начала очереди.
        // Если очередь пуста, возвращает значение null
        System.out.println("Удаление элемента из начала очереди ->   " + deque);
        deque.pollLast();
        // pollLast(): возвращает с удалением последний элемент очереди.
        // Если очередь пуста, возвращает значение null
        System.out.println("Удаление последнего элемента из очереди ->   " + deque);
        System.out.println();

        deque.offerFirst(1);
        //offerFirst(): добавляет элемент в самое начало очереди.
        System.out.println("Добавление элемента в самое начало очереди ->   " + deque);
        deque.offer(2);
        System.out.println("Добавление элемента в очередь ->   " + deque);
        deque.offerLast(3);
        //offerLast(E): добавляет элемент в конец очереди.
        System.out.println("Добавление элемента в конец очереди ->   " + deque);
        System.out.println();

        deque.getFirst();
        //getFirst(): возвращает без удаления элемент из головы очереди.
        // Если очередь пуста, генерирует исключение NoSuchElementException
        System.out.println("Возвращает без удаления элемента из головы очереди ->   " + deque.getFirst() + "\n" + deque);
        deque.getLast();
        // getLast(): возвращает без удаления последний элемент очереди.
        // Если очередь пуста, генерирует исключение NoSuchElementException
        System.out.println("Возвращает без удаления последнего элемента очереди ->   " + deque.getLast() + "\n" + deque);
        System.out.println();

        deque.peekFirst();
        //peekFirst(): возвращает без удаления элемент из начала очереди.
        // Если очередь пуста, возвращает значение null
        System.out.println("Возвращает без удаления из начала очереди ->   " + deque.peekFirst() + "\n" + deque);
        deque.peekLast();
        // peekLast(): возвращает без удаления последний элемент очереди.
        // Если очередь пуста, возвращает значение null
        System.out.println("Возвращает без удаления последнего элемента очереди ->   " + deque.peekLast() + "\n" + deque);


    }
}
