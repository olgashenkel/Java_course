// Классы отображений. TreeMap
// *********************************
//Класс TreeMap<K, V> представляет отображение в виде дерева.
// Он наследуется от класса AbstractMap и реализует интерфейс NavigableMap, а следовательно,
// также и интерфейс SortedMap. Поэтому в отличие от коллекции HashMap в TreeMap
// все объекты автоматически сортируются по возрастанию их ключей.

// TreeMap использует красно-черное дерево для хранения элементов,
// что обеспечивает быстрые операции добавления, удаления и поиска.
// Однако скорость этих операций зависит от количества элементов,
// что делает TreeMap медленнее, чем HashMap или LinkedHashMap при работе
// с большими объемами данных.

//Класс TreeMap имеет следующие конструкторы:
//•	TreeMap(): создает пустое отображение в виде дерева
//•	TreeMap(Map<? extends K,? extends V> map): создает дерево, в которое добавляет все элементы из отображения map
//•	TreeMap(SortedMap<K, ? extends V> smap): создает дерево, в которое добавляет все элементы из отображения smap
//•	TreeMap(Comparator<? super K> comparator): создает пустое дерево, где все добавляемые элементы впоследствии будут отсортированы компаратором.

// Кроме собственно методов интерфейса Map класс TreeMap реализует методы интерфейса NavigableMap.
// Например, мы можем получить все объекты до или после определенного ключа с помощью методов
// headMap и tailMap. Также мы можем получить первый и последний элементы и провести ряд
// дополнительных манипуляций с объектами.


import java.util.TreeMap;

public class Task_2 {
    public static void main(String[] args) {

        TreeMap<Integer,String> tMap = new TreeMap<>();
        tMap.put(1,"один"); System.out.println(tMap);
        // {1=один}
        tMap.put(6,"шесть"); System.out.println(tMap);
        // {1=один, 6=шесть}
        tMap.put(4,"четыре"); System.out.println(tMap);
        // {1=один, 4=четыре, 6=шесть}
        tMap.put(3,"три"); System.out.println(tMap);
        // {1=один, 3=три, 4=четыре, 6=шесть}
        tMap.put(2,"два"); System.out.println(tMap);
        // {1=один, 2=два, 3=три, 4=четыре, 6=шесть}

    }
}
