// –ó–∞–¥–∞–Ω–∏–µ ‚Ññ 0.
// üìå 1) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ ArrayList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//üìå 2) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ LinkedList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//–°—Ä–∞–≤–Ω–∏—Ç–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º.
// ************************

// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞:
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞:
//ArrayList:
//20
//LinkedList:
//85
//
//–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞:
//ArrayList:
//5996
//LinkedList:
//39
//
//–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω—É —Å–ø–∏—Å–∫–∞:
//ArrayList:
//2252
//LinkedList:
//136720
// ************************
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.LinkedList;

public class Task_1 {
    public static void main(String[] args) {

        int size = 200_000;

        System.out.println("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞: ");
        System.out.println("ArrayList: ");
        long start = System.currentTimeMillis(); // —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        getArrayListLast(size);
        System.out.println(System.currentTimeMillis() - start);

        System.out.println("LinkedList: ");
        start = System.currentTimeMillis(); // —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        getLinkedListLast(size);
        System.out.println(System.currentTimeMillis() - start);
        System.out.println();

        System.out.println("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞: ");
        System.out.println("ArrayList: ");
        start = System.currentTimeMillis(); // —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        getArrayListFirst(size);
        System.out.println(System.currentTimeMillis() - start);

        System.out.println("LinkedList: ");
        start = System.currentTimeMillis(); // —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        getLinkedListFirst(size);
        System.out.println(System.currentTimeMillis() - start);
        System.out.println();

        System.out.println("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω—É —Å–ø–∏—Å–∫–∞: ");
        System.out.println("ArrayList: ");
        start = System.currentTimeMillis(); // —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        getArrayListMiddle(size);
        System.out.println(System.currentTimeMillis() - start);

        System.out.println("LinkedList: ");
        start = System.currentTimeMillis(); // —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        getLinkedListMiddle(size);
        System.out.println(System.currentTimeMillis() - start);

    }

    public static ArrayList<Integer> getArrayListLast(int size) {
        ArrayList<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            arrayList.addLast(i);
        }
        return arrayList;
    }

    public static LinkedList<Integer> getLinkedListLast(int size) {
        LinkedList<Integer> linkedList = new LinkedList<>();
        for (int i = 0; i < size; i++) {
            linkedList.addLast(i);
        }
        return linkedList;
    }


    public static ArrayList<Integer> getArrayListMiddle(int size) {
        ArrayList<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            arrayList.add(arrayList.size()/2, i); // –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞ –º–µ—Ç–æ–¥ addFirst (–¥–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–∞—á–∞–ª–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É 0)
        }
        return arrayList;
    }

    public static LinkedList<Integer> getLinkedListMiddle(int size) {
        LinkedList<Integer> linkedList = new LinkedList<>();
        for (int i = 0; i < size; i++) {
            linkedList.add(linkedList.size()/2, i);
        }
        return linkedList;
    }


    public static ArrayList<Integer> getArrayListFirst(int size) {
        ArrayList<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            arrayList.addFirst(i); // –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞ –º–µ—Ç–æ–¥ addFirst (–¥–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–∞—á–∞–ª–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É 0)
        }
        return arrayList;
    }

    public static LinkedList<Integer> getLinkedListFirst(int size) {
        LinkedList<Integer> linkedList = new LinkedList<>();
        for (int i = 0; i < size; i++) {
            linkedList.addFirst(i);
        }
        return linkedList;
    }
}
