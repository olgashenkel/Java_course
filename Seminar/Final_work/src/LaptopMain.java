// –î–ó
//üìå –ü–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∫–ª–∞—Å—Å–∞ –ù–æ—É—Ç–±—É–∫ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∏ - –≤—ã–¥–µ–ª–∏—Ç—å –ø–æ–ª—è –∏ –º–µ—Ç–æ–¥—ã. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ java.
//üìå –°–æ–∑–¥–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ—É—Ç–±—É–∫–æ–≤.
//üìå –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–∏—Ç–µ—Ä–∏–π (–∏–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏)
//—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—ã–≤–µ–¥–µ—Ç –Ω–æ—É—Ç–±—É–∫–∏, –æ—Ç–≤–µ—á–∞—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—É. –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ Map.
// –ù–∞–ø—Ä–∏–º–µ—Ä:
//‚Äú–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é:
//1 - –û–ó–£
//2 - –û–±—ä–µ–º –ñ–î
//3 - –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
//4 - –¶–≤–µ—Ç ‚Ä¶

//üìå –î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
//–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –≤ Map.
//üìå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–æ—É—Ç–±—É–∫–∏ –∏—Ö –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ –ø–æ —É—Å–ª–æ–≤–∏—è–º.

/*
–ü–æ–ª—è:
    –ú–æ–¥–µ–ª—å (model) --> Honor, Apple, Huawei, Asus, Acer, Lenovo, HP
    –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å (RAM) --> 4–ì–ë, 8–ì–ë, 12–ì–ë, 16–ì–ë
    –û–±—ä–µ–º –∂–µ—Å—Ç–∫–æ–≥–æ –¥–∏—Å–∫–∞ (HDD) --> 256–ì–ë, 512–ì–ë, 1–¢–ë
    –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (OS) --> Windows 10, Windows 11, Linux, macOS
    –¶–≤–µ—Ç (color) --> –±–µ–ª—ã–π, –∫—Ä–∞—Å–Ω—ã–π, –±–µ–∂–µ–≤—ã–π, —á–µ—Ä–Ω—ã–π, —Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π
 */


import java.util.*;


public class LaptopMain {

    private static Scanner in = new Scanner(System.in);

    public static void main(String[] args) {

        Laptop.gritings();  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ–¥–µ–Ω–∏–π –æ –Ω–æ—É—Ç–±—É–∫–∞—Ö
        Set<Laptop> laptops = new HashSet<>();
        laptops.add(new Laptop("Honor", 4, 500, "Windows 11", "–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π"));
        laptops.add(new Laptop("Apple MacBook", 8, 1024, "MacOS", "–ë–µ–ª—ã–π"));
        laptops.add(new Laptop("Huawei", 16, 1024, "Windows 11", "–ß—ë—Ä–Ω—ã–π"));
        laptops.add(new Laptop("Honor", 16, 2048, "Windows 10", "–ë–µ–∂–µ–≤—ã–π"));
        laptops.add(new Laptop("Lenovo", 8, 500, "Windows 10", "–ö—Ä–∞—Å–Ω—ã–π"));
        laptops.add(new Laptop("Asus", 16, 500, "Windows 11", "–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π"));
        laptops.add(new Laptop("Lenovo", 4, 512, "Linux", "–ë–µ–∂–µ–≤—ã–π"));
        laptops.add(new Laptop("HP", 8, 1024, "Linux", "–ë–µ–ª—ã–π"));
        laptops.add(new Laptop("Apple MacBook", 16, 2048, "MacOS", "–ß—ë—Ä–Ω—ã–π"));
        laptops.add(new Laptop("Apple MacBook", 16, 2048, "MacOS", "–ß—ë—Ä–Ω—ã–π"));  // –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–æ–≤ equals –∏ hashCode

        filterLaptop(requestLaptop(), laptops);


    }


    public static HashMap<String, String> requestLaptop() {
        // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        HashMap<String, String> requestLaptop = new HashMap<>();

        System.out.println("–î–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –º–æ–¥–µ–ª–µ–π, –æ—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤." + System.lineSeparator());

        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–æ—É—Ç–±—É–∫–∞.");
        System.out.println("–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ (Ctrl + C) –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ (Ctrl + V).");
        System.out.println("1) Apple MacBook; \t 2) Asus; \t 3) Honor; \t 4) HP; \t 5) Huawei; \t 6) Lenovo; \t " +
                "7) –ï—Å–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ Enter");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç: ");
        requestLaptop.put("model", in.nextLine());
        System.out.println();

        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—ë–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ (RAM) (–æ–±—ä—ë–º –≤ –ì–ë): ");
        System.out.println("1) 4; \t 2) 8; \t 3) 16; \t " +
                "4) –ï—Å–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º, –≤–≤–µ–¥–∏—Ç–µ 0");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç: ");
        requestLaptop.put("ram", in.nextLine());
        System.out.println();

        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—ë–º –∂–µ—Å—Ç–∫–æ–≥–æ –¥–∏—Å–∫–∞ (HDD) (–æ–±—ä—ë–º –≤ –ì–ë): ");
        System.out.println("1) 500; \t 2) 512; \t 3) 1024; \t 4) 2048; \t  " +
                "5) –ï—Å–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º, –≤–≤–µ–¥–∏—Ç–µ 0");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç: ");
        requestLaptop.put("hdd", in.nextLine());
        System.out.println();

        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ");
        System.out.println("–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ (Ctrl + C) –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ (Ctrl + V).");
        System.out.println("1) MacOS; \t 2) Linux; \t 3) Windows 10; \t 4) Windows 11; \t  " +
                "5) –ï—Å–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ Enter");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç: ");
        requestLaptop.put("operatingSystem", in.nextLine());
        System.out.println();

        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –Ω–æ—É—Ç–±—É–∫–∞: ");
        System.out.println("–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ (Ctrl + C) –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ (Ctrl + V).");
        System.out.println("1) –ë–µ–∂–µ–≤—ã–π; \t 2) –ë–µ–ª—ã–π; \t 3) –ö—Ä–∞—Å–Ω—ã–π; \t 4) –°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π; \t 5) –ß—ë—Ä–Ω—ã–π; \t  " +
                "6) –ï—Å–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ Enter");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç: ");
        requestLaptop.put("color", in.nextLine());
        System.out.println();

        return requestLaptop;
    }

    public static void filterLaptop(HashMap<String, String> requestLaptop, Set<Laptop> laptops) {
        Boolean isResult = true;

        try {
            for (Laptop el : laptops) {

                if (requestLaptop.get("model").equals(el.getModel()) || requestLaptop.get("model").isEmpty()) {
                    if (Integer.parseInt(requestLaptop.get("ram")) == el.getRam() || Integer.parseInt(requestLaptop.get("ram")) == 0) {
                        if (Integer.parseInt(requestLaptop.get("hdd")) == el.getHdd() || Integer.parseInt(requestLaptop.get("hdd")) == 0) {
                            if (requestLaptop.get("operatingSystem").equals(el.getOperatingSystem()) || requestLaptop.get("operatingSystem").isEmpty()) {
                                if (requestLaptop.get("color").equals(el.getColor()) || requestLaptop.get("color").isEmpty()) {
                                    System.out.println(el);
                                    isResult = false;
                                }
                            }
                        }
                    }
                }

            }
            if (isResult) {
                System.out.println("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            }
        } catch (Exception ex) {
            System.out.print("–û—à–∏–±–∫–∞! –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö! ");
            System.out.println(ex.getMessage());

        } finally {
            System.out.println("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞–∂–º–∏—Ç–µ 'q'.");
            System.out.println("–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏—Ç–µ 0.");
            System.out.println("–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –í–°–ï–• –∏–º–µ—é—â–∏—Ö—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ—É—Ç–±—É–∫–æ–≤ –Ω–∞–∂–º–∏—Ç–µ 1");
            String answerStr = in.nextLine();
            if (answerStr.charAt(0) == 'q' || answerStr.charAt(0) == 'Q') {
                System.out.println("–î–æ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏!");
            } else if (answerStr.charAt(0) == '1') {
                System.out.println(laptops.toString().replaceAll("^\\[|\\,|\\]$", ""));
            } else if (answerStr.charAt(0) == '0') {
                filterLaptop(requestLaptop(), laptops);
            } else {
                System.out.println("–î–æ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏!");
            }
        }
        in.close();
    }
}